import { InitCommand } from '../../src/commands/init';
import { FileSystemService } from '../../src/services/filesystem';
import * as fs from 'fs-extra';
import * as path from 'path';
import { describe, test, expect, beforeEach, afterEach } from '@jest/globals';

/**
 * Integration tests for CLI Cursor IDE support
 *
 * Test suite: CLI Integration Tests for Cursor IDE
 * Validates command-line flag handling and file installation flows
 */
describe('CLI Cursor Integration Tests', () => {
  let testDir: string;
  let originalCwd: string;
  let initCommand: InitCommand;
  let fileSystem: FileSystemService;

  beforeEach(async () => {
    // Create a temporary test directory
    originalCwd = process.cwd();
    testDir = path.join(__dirname, '../../tmp-test-' + Date.now());
    await fs.ensureDir(testDir);
    process.chdir(testDir);

    // Set test environment
    process.env.NODE_ENV = 'test';

    // Initialize services
    initCommand = new InitCommand();
    fileSystem = new FileSystemService();
  });

  afterEach(async () => {
    // Clean up
    process.chdir(originalCwd);
    if (fs.existsSync(testDir)) {
      await fs.remove(testDir);
    }
  });

  describe('Init Command with Cursor Flag', () => {
    test('CLI-CUR-001: should initialize project with --cursor flag', async () => {
      const options = {
        template: 'general',
        force: true,
        skipGit: true,
        cursor: true,
      };

      await initCommand.execute(options);

      // Verify Cursor files were created
      expect(await fs.pathExists('.cursor/rules/workflow.mdc')).toBe(true);
      expect(await fs.pathExists('.cursor')).toBe(true);

      // Verify VS Code files were NOT created
      expect(await fs.pathExists('.vscode')).toBe(false);
    });

    test('CLI-CUR-002: should initialize project with --vscode flag (existing behavior)', async () => {
      const options = {
        template: 'general',
        force: true,
        skipGit: true,
        vscode: true,
      };

      await initCommand.execute(options);

      // Verify VS Code files were created
      expect(await fs.pathExists('.vscode')).toBe(true);
      expect(
        await fileSystem.fileExists('.github/copilot-instructions.md')
      ).toBe(true);

      // Verify Cursor files were NOT created
      expect(await fs.pathExists('.cursor/rules/workflow.mdc')).toBe(false);
      expect(await fs.pathExists('.cursor')).toBe(false);
    });

    test('CLI-CUR-003: should reject conflicting --vscode and --cursor flags', async () => {
      const options = {
        template: 'general',
        force: true,
        skipGit: true,
        vscode: true,
        cursor: true,
      };

      await expect(initCommand.execute(options)).rejects.toThrow(
        'Cannot specify both --vscode and --cursor flags'
      );
    });
  });

  describe('File Installation Flow', () => {
    test('CLI-CUR-004: should install Cursor files in empty project', async () => {
      const options = {
        template: 'typescript',
        force: true,
        skipGit: true,
        cursor: true,
      };

      await initCommand.execute(options);

      // Verify workflow.mdc content
      const workflowContent = await fileSystem.readFile(
        '.cursor/rules/workflow.mdc'
      );
      expect(workflowContent).toContain('metacoding');
      expect(workflowContent).toContain('Generated by metacoding');

      // Verify .cursor directory exists
      expect(await fs.pathExists('.cursor')).toBe(true);
    });

    test('CLI-CUR-005: should handle existing workflow.cursorrules safely', async () => {
      // Create existing legacy workflow.cursorrules file (should not conflict with new structure)
      await fileSystem.writeFile(
        'workflow.cursorrules',
        '# Existing legacy rules'
      );

      const options = {
        template: 'general',
        force: true, // Force overwrite to avoid prompts
        skipGit: true,
        cursor: true,
      };

      // This should complete without error (the service handles conflicts)
      await initCommand.execute(options);

      // Verify the new file structure was created (will overwrite legacy file with force: true)
      expect(await fs.pathExists('.cursor/rules/workflow.mdc')).toBe(true);
    }, 10000); // Increase timeout to 10 seconds
  });

  describe('Template-Specific Behavior', () => {
    test('CLI-CUR-006: should generate files for TypeScript template', async () => {
      const options = {
        template: 'typescript',
        force: true,
        skipGit: true,
        cursor: true,
      };

      await initCommand.execute(options);

      // Verify workflow.mdc exists
      expect(await fs.pathExists('.cursor/rules/workflow.mdc')).toBe(true);
      expect(await fs.pathExists('.cursor')).toBe(true);

      // Verify content includes metadata
      const workflowContent = await fileSystem.readFile(
        '.cursor/rules/workflow.mdc'
      );
      expect(workflowContent).toContain('Generated by metacoding');
    });

    test('CLI-CUR-007: should generate files for React template', async () => {
      const options = {
        template: 'react',
        force: true,
        skipGit: true,
        cursor: true,
      };

      await initCommand.execute(options);

      // Verify Cursor files exist
      expect(await fs.pathExists('.cursor/rules/workflow.mdc')).toBe(true);
      expect(await fs.pathExists('.cursor')).toBe(true);

      // Verify content was generated
      const workflowContent = await fileSystem.readFile(
        '.cursor/rules/workflow.mdc'
      );
      expect(workflowContent).toContain('Generated by metacoding');
    });

    test('CLI-CUR-008: should generate files for Python template', async () => {
      const options = {
        template: 'python',
        force: true,
        skipGit: true,
        cursor: true,
      };

      await initCommand.execute(options);

      // Verify Cursor files exist
      expect(await fs.pathExists('.cursor/rules/workflow.mdc')).toBe(true);
      expect(await fs.pathExists('.cursor')).toBe(true);

      // Verify content was generated
      const workflowContent = await fileSystem.readFile(
        '.cursor/rules/workflow.mdc'
      );
      expect(workflowContent).toContain('Generated by metacoding');
    });
  });

  describe('Error Handling', () => {
    test('CLI-CUR-009: should handle invalid template gracefully', async () => {
      const options = {
        template: 'nonexistent-template',
        force: true,
        skipGit: true,
        cursor: true,
      };

      await expect(initCommand.execute(options)).rejects.toThrow();
    });
  });
});
